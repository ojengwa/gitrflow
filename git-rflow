#!/usr/bin/env bash

#  https://github.com/thewoolleyman/gitrflow
#  Copyright (c) 2014 Chad Woolley - The MIT License

###
### Bash setup
###

# http://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html

gitrflow_bash_xtrace=${GITRFLOW_BASH_XTRACE:-false}
if [[ ${gitrflow_bash_xtrace} == 'true' ]]; then
  export PS4="+(\${BASH_SOURCE}:\${LINENO}): \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }"
  set -o xtrace
fi

gitrflow_bash_verbose=${GITRFLOW_BASH_VERBOSE:-false}
if [[ ${gitrflow_bash_verbose} == 'true' ]]; then
  set -o verbose
fi

set -o errexit # AKA -e - exit immediately on errors (http://mywiki.wooledge.org/BashFAQ/105)
set -o errtrace # AKA -E - any trap on ERR is inherited by subshell
set -o noclobber # AKA -C - disallow '>' to overwrite file (see http://mywiki.wooledge.org/NoClobber)
set -o nounset # AKA -u - guard against unused variables (see http://mywiki.wooledge.org/BashFAQ/035)
set -o pipefail # fail when pipelines contain an error (see http://www.gnu.org/software/bash/manual/html_node/Pipelines.html)

_log_prefix="[gitrflow] ${BASH_SOURCE}:"

function onexit() {
  local exit_status=${1:-$?}
  if [[ ${exit_status} != 0 ]]; then
    _error_line="error trapped."
  else
    _error_line=''
  fi
  if [[ $(type -t onexit_hook) = 'function' ]]; then
    onexit_hook
  fi
  echo "$_log_prefix $_error_line Exiting $0 with exit status $exit_status"
  exit "${exit_status}"
}

function disable_error_checking() {
  trap - ERR
  set +o errexit
}

function enable_error_checking() {
  trap onexit ERR
  set -o errexit
}

trap onexit HUP INT QUIT TERM ERR

###
### Command Processing
###

function run_branch_command() {
  branch_type=${1}
  command=${2}
  branch=${3}

  case ${branch_type} in
    feature)
      case ${command} in
        start)
          feature_start "${branch}"
          ;;
      esac
      ;;
  esac

}

function feature_start() {
  branch=${1}
  printf "Switched to a new branch '%s'\n\n" "${branch}"
  printf "Summary of actions:\n"
  printf "%s A new branch '%s' was created, based on 'master'\n" '-' "${branch}"
  printf "%s You are now on branch '%s'\n\n" '-' "${branch}"
  printf "Now, start committing on your feature. When done, use:\n\n" '-' "${branch}"
  printf "     git flow feature finish %s" "${branch}"
}

###
### Option handling
###

function print_version() {
  echo 'git-rflow, version 0.0.1'
}

function print_usage_and_exit() {
  printf "Usage: gitrflow <branch type> <command> [options]\n\n"
  printf "Branch Types:\n"
  printf "    feature\n"
  printf "\n"
  printf "Options:\n"
  printf "    -V, --version\t\tDisplay the program version\n"
  printf "    --\t\tIgnore all following options\n"
  printf "\nSee https://github.com/thewoolleyman/gitrflow for more information."
  exit 1
}

function print_error_and_exit() {
  echo "${1}" >&2
  printf "'git rflow --help' for usage.\n"
  exit 1
}

function parse_options() {
  set +o nounset

  # see http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
  if [[ -z "${1+x}" ]] ; then
    print_usage_and_exit
  fi

  if [[ "${1}" == '--' ]] ; then
    print_usage_and_exit
  fi

  # from http://mywiki.wooledge.org/BashFAQ/035
  while :; do
    case ${1} in
      feature) # Takes an option arguments, ensuring they have been specified.
        branch_type=${1}
        if [[ "${2}" ]]; then
          command=$2
          if [[ "${3}" ]]; then
            branch=$3
            shift 3
            continue
          else
            print_error_and_exit 'ERROR: The feature branch name is required.'
          fi
        else
          print_error_and_exit 'ERROR: The feature branch command is required.'
        fi
        ;;
      -h|--help)
        print_usage_and_exit
        ;;
      -V|--version)
        print_version
        exit 0
        ;;
      --) # ignore all following options
        shift
        break
        ;;
      *)
        # see http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
        if [[ -z "${1+x}" ]] ; then
          break
        else
          print_error_and_exit "ERROR: Unrecognized parameter '${1}'"
        fi
    esac

    shift
  done

  set -o nounset

  run_branch_command "${branch_type}" "${command}" "${branch}"
}

function invoke() {
  set +o nounset
  parse_options "${@}"
  set -o nounset
}

###
### invoke script
###

set +o nounset
invoke "${@}"
set -o nounset
